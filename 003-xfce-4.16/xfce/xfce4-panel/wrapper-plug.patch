--- wrapper/wrapper-plug.c	2022-04-16 23:39:02.000000000 +1200
+++ wrapper/wrapper-plug-patched.c	2022-04-27 22:54:42.000000000 +1200
@@ -30,9 +30,6 @@
 
 
 static void     wrapper_plug_finalize         (GObject        *object);
-static gboolean wrapper_plug_draw             (GtkWidget      *widget,
-                                               cairo_t        *cr);
-static void     wrapper_plug_background_reset (WrapperPlug    *plug);
 
 
 
@@ -46,9 +43,7 @@
   GtkPlug __parent__;
 
   /* background information */
-  GdkRGBA         *background_rgba;
-  gchar           *background_image;
-  cairo_pattern_t *background_image_cache;
+  GtkStyleProvider *style_provider;
 };
 
 
@@ -65,14 +60,10 @@
 static void
 wrapper_plug_class_init (WrapperPlugClass *klass)
 {
-  GObjectClass   *gobject_class;
-  GtkWidgetClass *gtkwidget_class;
+  GObjectClass *gobject_class;
 
   gobject_class = G_OBJECT_CLASS (klass);
   gobject_class->finalize = wrapper_plug_finalize;
-
-  gtkwidget_class = GTK_WIDGET_CLASS (klass);
-  gtkwidget_class->draw = wrapper_plug_draw;
 }
 
 
@@ -84,15 +75,8 @@
   GdkScreen       *screen;
   GtkStyleContext *context;
 
-  plug->background_rgba = NULL;
-  plug->background_image = NULL;
-  plug->background_image_cache = NULL;
-
   gtk_widget_set_name (GTK_WIDGET (plug), "XfcePanelWindowWrapper");
 
-  /* allow painting, else compositing won't work */
-  gtk_widget_set_app_paintable (GTK_WIDGET (plug), TRUE);
-
   /* set the colormap */
   screen = gtk_window_get_screen (GTK_WINDOW (plug));
   visual = gdk_screen_get_rgba_visual (screen);
@@ -105,125 +89,24 @@
   gtk_style_context_add_class (context, "xfce4-panel");
 
   gtk_drag_dest_unset (GTK_WIDGET (plug));
+  
+  /* add the style provider */
+  plug->style_provider = GTK_STYLE_PROVIDER (gtk_css_provider_new ());
+  
+  gtk_style_context_add_provider (context, plug->style_provider,
+                                  GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
 }
 
 
-
 static void
 wrapper_plug_finalize (GObject *object)
 {
-  wrapper_plug_background_reset (WRAPPER_PLUG (object));
+  g_object_unref (WRAPPER_PLUG (object)->style_provider);
 
   G_OBJECT_CLASS (wrapper_plug_parent_class)->finalize (object);
 }
 
 
-
-static gboolean
-wrapper_plug_draw (GtkWidget *widget,
-                   cairo_t   *cr)
-{
-  WrapperPlug     *plug = WRAPPER_PLUG (widget);
-  GtkStyleContext *context;
-  const GdkRGBA   *color;
-  GdkRGBA         *rgba;
-  GdkPixbuf       *pixbuf;
-  GError          *error = NULL;
-
-  cairo_save (cr);
-
-  /* The "draw" signal is in widget coordinates, transform back to window */
-  gtk_cairo_transform_to_window (cr,
-                                 GTK_WIDGET (plug),
-                                 gtk_widget_get_window (gtk_widget_get_toplevel (GTK_WIDGET (plug))));
-
-  if (G_UNLIKELY (plug->background_image != NULL))
-    {
-      cairo_set_operator (cr, CAIRO_OPERATOR_SOURCE);
-
-      if (G_LIKELY (plug->background_image_cache != NULL))
-        {
-          cairo_set_source (cr, plug->background_image_cache);
-          cairo_paint (cr);
-        }
-      else
-        {
-          /* load the image in a pixbuf */
-          pixbuf = gdk_pixbuf_new_from_file (plug->background_image, &error);
-
-          if (G_LIKELY (pixbuf != NULL))
-            {
-              gdk_cairo_set_source_pixbuf (cr, pixbuf, 0, 0);
-              g_object_unref (G_OBJECT (pixbuf));
-
-              plug->background_image_cache = cairo_get_source (cr);
-              cairo_pattern_reference (plug->background_image_cache);
-              cairo_pattern_set_extend (plug->background_image_cache, CAIRO_EXTEND_REPEAT);
-              cairo_paint (cr);
-            }
-          else
-            {
-              /* print error message */
-              g_warning ("Background image disabled, \"%s\" could not be loaded: %s",
-                         plug->background_image, error != NULL ? error->message : "No error");
-              g_error_free (error);
-
-              /* disable background image */
-              wrapper_plug_background_reset (plug);
-            }
-        }
-    }
-  else
-    {
-      cairo_set_operator (cr, CAIRO_OPERATOR_SOURCE);
-
-      /* get the background gdk rgba */
-      if (plug->background_rgba != NULL)
-        {
-          color = plug->background_rgba;
-          cairo_set_source_rgba (cr, color->red, color->green,
-                                 color->blue, color->alpha);
-        }
-      else
-        {
-          context = gtk_widget_get_style_context (widget);
-          gtk_style_context_get (context, GTK_STATE_FLAG_NORMAL,
-                                 GTK_STYLE_PROPERTY_BACKGROUND_COLOR,
-                                 &rgba, NULL);
-          gdk_cairo_set_source_rgba (cr, rgba);
-          gdk_rgba_free (rgba);
-        }
-
-      /* draw the background color */
-      cairo_paint (cr);
-    }
-
-  cairo_restore(cr);
-
-  return GTK_WIDGET_CLASS (wrapper_plug_parent_class)->draw (widget, cr);
-}
-
-
-
-static void
-wrapper_plug_background_reset (WrapperPlug *plug)
-{
-  panel_return_if_fail (WRAPPER_IS_PLUG (plug));
-
-  if (plug->background_rgba != NULL)
-    gdk_rgba_free (plug->background_rgba);
-  plug->background_rgba = NULL;
-
-  if (plug->background_image_cache != NULL)
-    cairo_pattern_destroy (plug->background_image_cache);
-  plug->background_image_cache = NULL;
-
-  g_free (plug->background_image);
-  plug->background_image = NULL;
-}
-
-
-
 WrapperPlug *
 wrapper_plug_new (Window socket_id)
 {
@@ -257,30 +140,42 @@
 wrapper_plug_set_background_color (WrapperPlug *plug,
                                    const gchar *color_string)
 {
-  GdkRGBA                 color;
+  GdkRGBA  color;
+  gchar   *css;
 
   panel_return_if_fail (WRAPPER_IS_PLUG (plug));
 
-  wrapper_plug_background_reset (plug);
+  /* interpret NULL color as user requesting the system theme, so reset the css here */
+  if (color_string == NULL)
+    {
+      gtk_css_provider_load_from_data (GTK_CSS_PROVIDER (plug->style_provider), "", -1, NULL);
+      return;
+    }
+  
+  if (gdk_rgba_parse (&color, color_string))
+    {
+      css = g_strdup_printf ("* { background: %s; }", gdk_rgba_to_string (&color));
 
-  if (color_string != NULL
-      && gdk_rgba_parse (&color, color_string))
-    plug->background_rgba = gdk_rgba_copy (&color);
+      gtk_css_provider_load_from_data (GTK_CSS_PROVIDER (plug->style_provider), css, -1, NULL);
 
-  gtk_widget_queue_draw (GTK_WIDGET (plug));
+      g_free (css);
+    }
 }
 
 
 
+
 void
 wrapper_plug_set_background_image (WrapperPlug *plug,
                                    const gchar *image)
 {
+  gchar *css;
+
   panel_return_if_fail (WRAPPER_IS_PLUG (plug));
 
-  wrapper_plug_background_reset (plug);
+  css = g_strdup_printf ("* { background: url('%s'); }", image);
 
-  plug->background_image = g_strdup (image);
+  gtk_css_provider_load_from_data (GTK_CSS_PROVIDER (plug->style_provider), css, -1, NULL);
 
-  gtk_widget_queue_draw (GTK_WIDGET (plug));
+  g_free (css);
 }
